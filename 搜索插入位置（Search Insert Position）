//利用二分法进行搜索
class Solution {
public:
	int searchInsert(int A[], int n, int target) 
	{
		if (n <= 0)
			return 0;

		if (n == 1)
			return A[0] < target ? 1 : 0;

		bool increase;
		if (A[0] > A[1])
			increase = false;
		else
			increase = true;
		return BinarySearch(A, 0, n - 1, target,increase,n);
	}
	int BinarySearch(int A[],int start,int end,int target,bool increase,int length)
	{
		
		int middle = (start + end)>>1;
		if (A[middle] == target)
			return middle;
		if (A[middle] > target)
		{
			if (increase)
			{  
				if (start <= (middle - 1))
					return BinarySearch(A, start, middle - 1, target, increase,length);
				else
					return middle;
			}
				
			else
			{
				if (start <= (middle + 1))
					return BinarySearch(A, middle + 1, end, target, increase,length);
				else
					return middle+1;
			}
				
		}
		else
		{
			if (increase)
			{ 
				if ((middle + 1) <= end)
					return BinarySearch(A, middle + 1, end, target, increase,length);
				else
					return middle + 1;
			}	
			else
			{ 
				if (start <= (middle - 1))
					return BinarySearch(A, start, middle - 1, target, increase,length);
				else
					return middle;
			}
				
		}																		 

	}
};
