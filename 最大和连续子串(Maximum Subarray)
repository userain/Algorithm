//题目：和最大连续子串
//方法：利用动态规划求解，从头开始对前面数字进行相加，若和sum大于0，则再加上当前的数字判断与result的大小，若sum小于0，则抛弃前面的数字，sum=当前数字，然后再这里还要判断一下sum与result的大小关系
//注意：进入for循环以后，一定要先判断sum小于0否，判断是否丢弃前面的和，不能先对sum加上当前数字再判断，这样会错误，例如[−2,1,−3,4,−1,2,1,−5,4]
//      因为，当加到-3时前面小于0，此时sum=-3，下一个数字是4若直接sum+4 = 1，这样1大于0，边将-3包含进了结果内部，实际上结果内并没有-3
class Solution {
public:
	int maxSubArray(vector<int>& nums) 
	{
		int sum = 0;
		int result = INT_MIN;
		for (int i = 0; i < nums.size(); ++i)
		{
			sum < 0?sum = nums[i]:sum = sum +nums[i];	      //先判断sum与0的关系，判断是否舍弃前面的结果
			sum>result ? result = sum : sum = sum;	        //再将新sum与result进行判断
		}
		return result;
	}
};
