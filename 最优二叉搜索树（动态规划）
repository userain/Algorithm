/*最优二叉搜索树*/
/**********************
利用动态规划,自底向上求解最优二叉搜索树，详细分析请见《算法导论》第三版226页
**********************/
#include <iostream>
#include <queue>
using namespace std;

#define N  5	//定义总共有5个节点

void PrintRoot(int (*root)[N],int start,int end);
int main()
{
	double p[N+1] = {0,0.15,0.10,0.05,0.10,0.20};				//5个节点的搜索概率
	double q[N+1] = {0.05,0.10,0.05,0.05,0.05,0.10};			//6个区间的搜索概率，也就是为搜索到节点落到失败区间的概率

	double e[N+1][N],w[N+1][N];						
	int root_path[N][N];						//root_path[i][j]用来存储i到j关键字的根节点
	for(int i=1; i<=N+1; ++i)
	{
		w[i][i-1] = q[i-1];			
		e[i][i-1] = q[i-1];						//对于j<i的关键字序列，我们认为其代表区间qi-1,因此其期望代价为q[i-1]
	}

	for(int length=1; length<=N; ++length)		//关键字序列长度从1到N
	{
		for(int start=1; start+length-1<=N; ++start)//序列起始关键字从1号至N-length+1号
		{
			int end = start+length-1;
			e[start][end] = 100000;
			w[start][end] = w[start][end-1]+p[end]+q[end];
			for(int root=start; root<=start+length-1; ++root)//分别求解以序列每一个关键字为根节点的代价，记录代价最小的根节点
			{
				double temp = e[start][root-1] + e[root+1][end] + w[start][end];
				if(temp < e[start][end])
				{
					e[start][end] = temp;
					root_path[start][end] = root;
				}	
			}
		}
	}
	
	PrintRoot(root_path,1,N);	//打印整个最优二叉搜索树
	return 0; 
}

void PrintRoot(int (*root)[N],int start,int end)
{
	int temp;
	if(start <= end)
	{
		temp = root[start][end];
		cout <<"起始点:"<<start<<"终止点:"<<end<<"根节点:"<<temp <<endl;
		PrintRoot(root,start,temp-1);
		PrintRoot(root,temp+1,end);
	}
}
