//方法：先对区间进行排序，然后从头至尾扫描，合并
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
bool cmp(const Interval& inter1, const Interval& inter2)
{
	return inter1.start < inter2.start;
}

class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) 
    {
        if (intervals.size() < 2)
			return intervals;
		vector<Interval> result;
		sort(intervals.begin(), intervals.end(), cmp);
		int pointer=1;
		int start = intervals[0].start;
		int end = intervals[0].end;
		while (pointer < intervals.size())
		{
			if (intervals[pointer].start > end)
			{
				result.push_back(Interval(start, end));
				start = intervals[pointer].start;
				end = intervals[pointer].end;
			}
			else
				end = max(end, intervals[pointer].end);
			++pointer;
		}
		result.push_back(Interval(start, end));
		return result;
	}
};
