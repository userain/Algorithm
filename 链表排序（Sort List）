//方法：利用归并方法对链表进行排序，先将一个链表分成两个子链表，对子链表排序完成后再merge
class Solution {
public:
	ListNode* sortList(ListNode* head) {
		int length = 0;
		ListNode* temp = head;
		while (temp) {
			++length;
			temp = temp->next;
		}
		if (length == 0)
			return head;
		head = guiBingSort(head, length);
		return head;
	}
	ListNode* guiBingSort(ListNode* head, int length) {     //一个链表分成两个子链表
		if (length == 1)
			return head;
		ListNode* newhead = head;
		for (int i = 0;i < length / 2;++i) {
			newhead = newhead->next;
		}
		head = guiBingSort(head, length / 2);
		newhead = guiBingSort(newhead, length - (length / 2));
		head = merge(head, length / 2, newhead, length - (length / 2));
		return head;
	}
	ListNode* merge(ListNode* l1, int length1, ListNode* l2, int length2) {     //merge过程
		ListNode* p1 = l1, *p2 = l2;
		ListNode* head = NULL, *pointer = NULL;
		int counter1 = 0, counter2 = 0;
		if (l1->val > l2->val) {
			head = l2;
			pointer = l2;
			p1 = l1;
			p2 = l2->next;
			++counter2;
		}
		else {
			head = l1;
			pointer = l1;
			p1 = l1->next;
			p2 = l2;
			++counter1;
		}
		while (counter1<length1&&counter2< length2) {
			if (p1->val > p2->val) {
				pointer->next = p2;
				p2 = p2->next;
				++counter2;
				pointer = pointer->next;
			}
			else {
				pointer->next = p1;
				p1 = p1->next;
				++counter1;
				pointer = pointer->next;
			}
		}
		if (counter2 < length2) {
			pointer->next = p2;
			while (counter2 < (length2-1)) {      //merge完成后要对链表尾部位置指针置空
				p2 = p2->next;
				++counter2;
			}
			p2->next = NULL;
		}
		else if (counter1 < length1) {
			pointer->next = p1;
			while (counter1 < (length1 - 1)) {
				p1 = p1->next;
				++counter1;
			}
			p1->next = NULL;
		}
		return head;
	}
};
