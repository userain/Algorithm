//方法：注意理论推倒
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
	ListNode *detectCycle(ListNode *head) {
		ListNode* slowPointer = head;
		ListNode* fastPointer = head;
		while (fastPointer&&fastPointer->next) {
			slowPointer = slowPointer->next;
			fastPointer = fastPointer->next->next;
			if (slowPointer == fastPointer)
				break;
		}
		if (fastPointer == NULL || fastPointer->next == NULL)
			return NULL;

		slowPointer = head;
		while (slowPointer != fastPointer) {
			slowPointer = slowPointer->next;
			fastPointer = fastPointer->next;
		}
		return slowPointer;
	}
};
