//利用递归的方式，寻找出二叉树中和为某一值的路径
struct BinTreeNode
{
	int value;
	BinTreeNode* leftchild;
	BinTreeNode* rightchild;
};
void FindPaths(BinTreeNode* pRoot, int expectedSum)
{
	if (pRoot == NULL)
		return;
	vector<int> path;
	findpath(pRoot, path, expectedSum);
}
void findpath(BinTreeNode* pRoot, vector<int> &path, int expectedSum)
{
	path.push_back(pRoot->value);

	if (pRoot->leftchild == NULL && pRoot->rightchild == NULL)
	{
		int tempsum = 0;
		for (int i = 0; i < path.size(); ++i)
			tempsum = tempsum + path[i];

		if (tempsum == expectedSum)
		{
			for (int i = 0; i < path.size(); ++i)
				cout << path[i] << " ";
			cout << endl;
		}
	}
	
	if (pRoot->leftchild != NULL)
		findpath(pRoot->leftchild,path,expectedSum);
	if (pRoot->rightchild != NULL)
		findpath(pRoot->rightchild, path, expectedSum);

	path.pop_back();
}
