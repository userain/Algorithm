//方法：利用小堆，将每一个链表的开头放进堆中，弹出堆顶，放进result链表，然后将弹出的链表的下一个节点地址继续存入堆中，维护堆，反复
//该过程指导堆空
//注意：stl中堆默认为大顶堆，因此要自己定义节点的比较函数，比较函数为true时表示要交换位置
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
bool listNodeCmp(const ListNode* p1, const ListNode* p2) {      //比较函数
	return p1->val > p2->val;
}
class Solution {
public:
	ListNode* mergeKLists(vector<ListNode*>& lists) {       
		if (lists.size() == 0)
			return NULL;
		if (lists.size() == 1)
			return lists[0];
		ListNode* result = new ListNode(NULL);      //放入头结点
		ListNode* pointerResult = result;
		vector<ListNode*> listPointerVector;
		for (int i = 0;i < lists.size();++i) {        
			if(lists[i])                                        //将每个链表第个放入堆中，这里判断是否为空是为了防止多个链表中有空链表存在
				listPointerVector.push_back(lists[i]);
		}
		make_heap(listPointerVector.begin(), listPointerVector.end(), listNodeCmp);   //建堆
		while(!listPointerVector.empty()){
			pop_heap(listPointerVector.begin(), listPointerVector.end(), listNodeCmp);    //弹出堆顶，这里pop_heap的作用是将堆顶与堆尾进行交换，并将堆元素个数减一，并重新维护堆
			ListNode* temp = listPointerVector.back();
			pointerResult->next = temp;
			pointerResult = pointerResult->next;
			listPointerVector.pop_back();
			if (temp->next != NULL) {
				listPointerVector.push_back(temp->next);          //将下一个节点放入堆中
				push_heap(listPointerVector.begin(), listPointerVector.end(), listNodeCmp); 
			}		
		}
		pointerResult = result->next;
		delete(result);                             //删除头结点
		result = pointerResult;
		return result;
	}
};
