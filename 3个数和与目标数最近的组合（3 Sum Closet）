//3个数和与目标数最近的组合
//方法：和3Sum类似，排序，固定一个数，利用头尾指针，寻找另外两个数
class Solution {
public:
	int threeSumClosest(vector<int> &num, int target) 
	{
			
				if (num.size() < 3)
					return 0;
				int result = num[0] + num[1] + num[2];
				sort(num.begin(), num.end());
				for (int i = 0; i < num.size(); ++i)
				{
					if (i > 0 && num[i] == num[i - 1])
						continue;
					int k = i + 1;
					int j = num.size() - 1;
					while (k < j)
					{
						if ((k > i + 1) && num[k] == num[k - 1])
							k++;
						else if ((j < num.size() - 1) && num[j] == num[j + 1])
							j--;
						else if (target - (num[i] + num[k] + num[j]) > 0)
						{
							if (abs(target - (num[i] + num[k] + num[j])) < abs(target - result))
								result = num[i] + num[k] + num[j];
							k++;
						}
						else if (target - (num[i] + num[k] + num[j]) < 0)
						{
							if (abs(target - (num[i] + num[k] + num[j])) < abs(target - result))
								result = num[i] + num[k] + num[j];
							j--;
						}
						else
						{
							return target;
						}
					}
				}
				return result;
			}
};
