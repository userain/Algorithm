//题目：求解矩阵中从左上角到右下角的和最小路径
//方法：利用动态规划，左下角的最小路径和mem[i][j] = min(mem[i-1][j]+grid[i][j],mem[i][j-1]+gird[i][j])
class Solution {
public:
	int minPathSum(vector<vector<int> > &grid) 
	{
		int rows = grid.size();
		if (0 == rows)
			return 0;
		int column = grid[0].size();
		vector<vector<int> > mem;
		mem.resize(rows);
		for (int i = 0; i < rows; ++i)
			mem[i].resize(column);
		
		int sum = 0;
		for (int i = 0; i < column; ++i)    //先将最上面一行和最左边一列填写好，因为这一行和一列只能向右走和向下走，选择只有一种
		{
			sum= sum + grid[0][i];
			mem[0][i] = sum;
		}
		sum = 0;
		for (int i=0; i < rows; ++i)
		{
			sum = sum + grid[i][0];
			mem[i][0] = sum;
		}

		for (int i = 1; i < rows; ++i)
		{
			for (int j = 1; j < column; ++j)    //利用动态规划存储中间值
			{
				mem[i][j] = min(mem[i-1][j]+grid[i][j],mem[i][j-1]+grid[i][j]);
			}
		}
		return mem[rows - 1][column - 1];
	}
};
