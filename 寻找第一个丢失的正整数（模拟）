/***********************
题目链接：https://oj.leetcode.com/problems/first-missing-positive/
题目大意：根据输入的一组数据，寻找其缺失的第一个正整数，注意例如-1,0,2,3返回1，而-1,0,1,2,3则返回4，要求线性时间，常数空间复杂度。
求解思路：将输入的数据i，存放在i-1的原数组位置，为何是i-1位置，而不是i位置，是因为若输入数据0,1,2那么若存放在i位置，2就无法存放。
        对所有的数据调整完毕后，从前到后检查，第一个位置和数据不吻合的地方就是第一个不符合的正整数。具体见程序注释。
***********************/
#include <iostream>
#include <algorithm>
using namespace std;
int firstMissingPositive(int A[], int n);
int const MAX_SIZE = 1000;      //定义数组长为1000
int main()
{
	while (1)
	{
		int N = 0;
		int data[MAX_SIZE] = { 0 };
		cin >> N;
		for (int i = 0; i < N; i++)
		{
			cin >> data[i];
		}
		cout << firstMissingPositive(data, N) << endl;
	}
	return 0;
}

int firstMissingPositive(int A[], int n) 
{
	int i = 0;
	for (i = 0; i < n; i++)
	{
		while ((A[i] > 0)&&(A[i] != (i + 1)) &&(n>=A[i]) &&(A[i] != A[A[i] - 1]))   //对于当前A[i]>0的，并且A[i]!=i-1的，并且当前A[i]的大小不超过数组的长度，
		                                                                            //不会导致无法存放的，并且当前和目标交换区域的值不相等的，
		                                                                            //那么就将两位置的数据进行交换，直到出现无意义情况,i+1,查看下一个位置的数
		{
			swap(A[i], A[A[i] - 1]);
		}
	}

	for (i = 0; i < n; i++)
	{
		if (A[i] != (i + 1))          //查找第一个i与A[i]不相符的位置，就是第一个缺失正整数的位置
			break;
	}
	return i + 1;
}
